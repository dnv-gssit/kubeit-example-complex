# Reference ArgoCD application definition - https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/application.yaml
{{- mergeOverwrite .Values (deepCopy (default (dict) .Values.global)) -}}
{{- range $app := .Values.applications }}
{{- range $environment := $app.environments }}
{{- range $environment.namespaces }}
{{- if eq $.Values.env $environment.name }}
{{- if has $.Values.region $environment.region }}
{{- if has $.Values.clusterColour $environment.clusterColour }}

# https://docs.microsoft.com/en-us/azure/devops/organizations/settings/naming-restrictions?view=azure-devops
{{- $envDirectory := "" }}
{{- if eq $.Values.env "aux" }}
{{ $envDirectory = "auxiliary" }}
{{- else }}
{{ $envDirectory = $.Values.env }}
{{- end }}

{{- $enableUpdater := false }}
{{- $updaterRepo := "" }}
{{- $updaterConstraint := "" }}
{{- $updaterAllowTags := "" }}
{{- $updaterIgnoreTags := "" }}
{{- $updaterGitBranch := "" }}
{{- $updaterGitSecret := "" }}
{{- $updaterStrategy := "" }}
{{- $updaterPullSecret := "" }}

# ArgoCD Image Updater Variables
{{- if $.Values.global.argoCDImageUpdater }}
{{- $enableUpdater = true }}
{{- $updaterRepo = default "" $.Values.global.argoCDImageUpdater.updaterRepository | trim }}
{{- $updaterConstraint = default "" $.Values.global.argoCDImageUpdater.updaterVersionConstraint | trim }}
{{- $updaterAllowTags = default "" $.Values.global.argoCDImageUpdater.updaterAllowTags | trim }}
{{- $updaterIgnoreTags = default "" $.Values.global.argoCDImageUpdater.updaterIgnoreTags | trim }}
{{- $updaterGitBranch = default "" $.Values.global.argoCDImageUpdater.updaterGitBranch | trim }}
{{- $updaterGitSecret = default "" $.Values.global.argoCDImageUpdater.updaterGitSecret | trim }}
{{- $updaterStrategy = default "" $.Values.global.argoCDImageUpdater.updaterStrategy | trim }}
{{- $updaterPullSecret = default "" $.Values.global.argoCDImageUpdater.updaterPullSecret | trim }}
{{- end }}
{{- $appTruncName := printf "%s-%s" ($app.name | trunc 31 | trimSuffix "-") . | trunc 43 | trimSuffix "-" }}
{{- $appPath := ($app.chart | default dict ).path | default $.Values.global.chart.path }}
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ $appTruncName }}
  namespace: {{ $.Values.managementNamespace }}
  annotations:
    argocd.argoproj.io/sync-wave: {{ $app.syncWave | default "'1'" }}
    {{- if $enableUpdater }}
    argocd-image-updater.argoproj.io/write-back-method: {{ if $updaterGitSecret }}{{ toYaml ( printf "git:secret:%s" $updaterGitSecret ) }}{{- else -}}{{ default "git:repocreds" }}{{- end }}
    argocd-image-updater.argoproj.io/git-branch: {{ $updaterGitBranch | default $.Values.targetRevision }}
    argocd-image-updater.argoproj.io/image-list: {{ if $updaterConstraint }}{{  toYaml (printf "alias=%s:%s" $updaterRepo $updaterConstraint) }}{{- else -}}{{ $updaterRepo }}{{- end }}
    argocd-image-updater.argoproj.io/alias.allow-tags: {{ if $updaterAllowTags }}{{ toYaml (printf "regexp:%s" $updaterAllowTags) }}{{- else -}}{{ default "any" }}{{- end }}
    argocd-image-updater.argoproj.io/alias.ignore-tags: {{ $updaterIgnoreTags | default "none" }}
    argocd-image-updater.argoproj.io/alias.update-strategy: {{ $updaterStrategy | default "semver" }}
    {{- if $updaterPullSecret }}
    argocd-image-updater.argoproj.io/alias.pull-secret: {{ $updaterPullSecret }}
    {{- end }}
    {{- end }}
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  destination:
    namespace: "{{ . }}"
    server: 'https://kubernetes.default.svc'
  project: "{{ $.Values.tenantName }}"
  source:
    repoURL: "{{ ($app.chart | default dict ).repoURL | default $.Values.repoURL }}"
    {{- if and (hasKey ($app.chart | default dict) "targetRevision") (eq ($app.chart | default dict ).targetRevision "latest") }}
    {{- else }}
    targetRevision: "{{ ($app.chart | default dict ).targetRevision | default $.Values.targetRevision }}"
    {{- end }}
    {{- if hasKey ($app.chart | default dict) "name" }}
    chart: "{{ $app.chart.name }}"
    {{- else }}
    path: "{{ $appPath }}"
    {{- end }}
    helm:
      ignoreMissingValueFiles: {{ ($app.chart | default dict ).ignoreMissingValueFiles | default $.Values.global.chart.ignoreMissingValueFiles }}
      skipCrds: {{ ($app.chart | default dict ).skipCrds | default $.Values.global.chart.skipCrds }}
      valueFiles:
        - appValues/global.yaml
        - appValues/{{ $app.name }}/appGlobal.yaml
        - appValues/{{ $app.name }}/environment/{{ $envDirectory }}/{{ $envDirectory }}.yaml
        - appValues/{{ $app.name }}/environment/{{ $envDirectory }}/region/{{ $.Values.region }}/{{ $.Values.region }}.yaml
        - appValues/{{ $app.name }}/environment/{{ $envDirectory }}/region/{{ $.Values.region }}/cluster/{{ $.Values.clusterColour }}.yaml
        - appValues/{{ $app.name }}/environment/{{ $envDirectory }}/region/{{ $.Values.region }}/cluster/namespaces/{{ . }}.yaml
      values: |
        global:
          app: {{ $app.name }}
          namespace: {{ . }}
          gateway:
            name: istio-system/global-https-{{ $.Values.ingressType }}-default-gateway
          defaultRouting:
            kubeitDefaultHosts:
              dnsDomain: "{{ $.Values.dnsDomain }}"
              tenantMultiRegion: "{{ $.Values.tenantMultiRegion }}"
          kubeit:
            region: "{{ $.Values.region }}"
            namespace: "{{ . }}"
            clusterSubdomain: "{{ $.Values.clusterSubdomain }}"
            clusterColour: "{{ $.Values.clusterColour }}"
            ingressType: "{{ $.Values.ingressType }}"
            shortRegion: "{{ $.Values.shortRegion }}"
            tenantName: "{{ $.Values.tenantName }}"
            environmentName: "{{ $.Values.env }}"
            tenantPodIdentityName: "{{ $.Values.tenantPodIdentityName }}"
  {{- if ($app.ignoreReplicasOnSync | default false) }}
  ignoreDifferences:
  - group: "apps"
    kind: "Deployment"
    jsonPointers:
    - /spec/replicas
  {{- end }}
  syncPolicy:
    automated:
      prune: true
      selfHeal: {{ $app.selfHeal | default "true" }}
    syncOptions:
      - Validate=true
      - CreateNamespace=false
      - PrunePropagationPolicy=foreground
      - PruneLast=false
      {{if ($app.ignoreReplicasOnSync | default false) }}- RespectIgnoreDifferences{{ end }}
    retry:
      limit: 2
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 1m
---
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
